pipeline {
    agent any
    environment {
        DOKER_IMAGE = 'login-jose'
        DOCKER_TAG = 'latest'
        PYTHON_VERSION = '3.12-slim'
    }
    stages {
        stage('Iniciar entorno de Python') {
            steps {
                sh 'python3 -m venv venv'   // Crea un entorno virtual
                sh 'source venv/bin/activate && pip install -r requirements.txt' // Instala dependencias
            }
        }
        stage('Prueba de python') {
            steps {
                script {
                    sh 'source venv/bin/activate && pytest --junitxml=reports/test-results.xml' // Ejecuta pytest
                }
            }
            post {
                always {
                    junit 'reports/test-results.xml' // Guarda los resultados en Jenkins
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${DOCKER_TAG} ." // Construye la imagen Docker
                }
            }
        }
        stage('Deploy') {
            steps {
                script {
                    sh "docker run -d --name ${DOCKER_IMAGE} -p 8080:8080 ${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${DOCKER_TAG}" // Ejecuta el contenedor
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline ejecutado con Ã©xito."
        }
        failure {
            echo "Pipeline fallido. Revisa los logs."
        }
    }
}