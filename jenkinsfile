pipeline {
    agent {
        docker {
            image 'python:3.12-slim'
            args '--privileged -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    environment {
        DOCKER_IMAGE = 'login-jose'
        DOCKER_TAG = 'latest'
    }

    stages {
        stage('Preparar entorno') {
            steps {
                sh '''
                apt update && apt install -y git docker.io python3-venv
                '''
            }
        }

        stage('Clonar Repositorio') {
            steps {
                sh '''
                if [ ! -d ".git" ]; then
                    git clone https://github.com/LuyoJose/Login.git .
                else
                    git fetch origin
                    BRANCH=$(git rev-parse --abbrev-ref HEAD)
                    git reset --hard origin/$BRANCH
                fi
                '''
            }
        }

        stage('Instalar dependencias') {
            steps {
                sh '''
                python3 -m venv venv
                ./venv/bin/pip install --upgrade pip
                ./venv/bin/pip install -r requirements.txt
                '''
            }
        }

        stage('Ejecutar pruebas') {
            steps {
                sh '''
                ./venv/bin/pytest --junitxml=reports/test-results.xml
                '''
            }
            post {
                always {
                    junit 'reports/test-results.xml'
                }
            }
        }

        stage('Construir imagen Docker') {
            steps {
                sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
            }
        }

        stage('Desplegar Contenedor') {
            steps {
                sh '''
                docker stop ${DOCKER_IMAGE} || true
                docker rm ${DOCKER_IMAGE} || true
                docker run -d --name ${DOCKER_IMAGE} -p 8000:8000 ${DOCKER_IMAGE}:${DOCKER_TAG}
                '''
            }
        }
    }

    post {
        success {
            echo "Pipeline ejecutado con Ã©xito."
        }
        failure {
            echo "Pipeline fallido. Revisa los logs."
        }
    }
}
